// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2fcaffe2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Argument_caffe2_2fproto_2fcaffe2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputInfo_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelMeta_model_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputInfo_model_2eproto;
namespace caffe2 {
class InputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputInfo> _instance;
} _InputInfo_default_instance_;
class OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputInfo> _instance;
} _OutputInfo_default_instance_;
class ModelMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelMeta> _instance;
} _ModelMeta_default_instance_;
class ModelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef> _instance;
} _ModelDef_default_instance_;
}  // namespace caffe2
static void InitDefaultsscc_info_InputInfo_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_InputInfo_default_instance_;
    new (ptr) ::caffe2::InputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::InputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputInfo_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputInfo_model_2eproto}, {}};

static void InitDefaultsscc_info_ModelDef_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_ModelDef_default_instance_;
    new (ptr) ::caffe2::ModelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ModelDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDef_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelDef_model_2eproto}, {
      &scc_info_ModelMeta_model_2eproto.base,
      &scc_info_Argument_caffe2_2fproto_2fcaffe2_2eproto.base,}};

static void InitDefaultsscc_info_ModelMeta_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_ModelMeta_default_instance_;
    new (ptr) ::caffe2::ModelMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ModelMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelMeta_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelMeta_model_2eproto}, {
      &scc_info_InputInfo_model_2eproto.base,
      &scc_info_OutputInfo_model_2eproto.base,}};

static void InitDefaultsscc_info_OutputInfo_model_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_OutputInfo_default_instance_;
    new (ptr) ::caffe2::OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputInfo_model_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputInfo_model_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_model_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_model_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::caffe2::InputInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::InputInfo, dims_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::caffe2::OutputInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::OutputInfo, labels_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelMeta, input_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelMeta, output_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelDef, meta_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelDef, init_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ModelDef, predict_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::caffe2::InputInfo)},
  { 7, 13, sizeof(::caffe2::OutputInfo)},
  { 14, 21, sizeof(::caffe2::ModelMeta)},
  { 23, 31, sizeof(::caffe2::ModelDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::caffe2::_InputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::caffe2::_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::caffe2::_ModelMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::caffe2::_ModelDef_default_instance_),
};

const char descriptor_table_protodef_model_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013model.proto\022\006caffe2\032\031caffe2/proto/caff"
  "e2.proto\"\031\n\tInputInfo\022\014\n\004dims\030\001 \003(\r\"\034\n\nO"
  "utputInfo\022\016\n\006labels\030\001 \003(\t\"Q\n\tModelMeta\022 "
  "\n\005input\030\001 \001(\0132\021.caffe2.InputInfo\022\"\n\006outp"
  "ut\030\002 \001(\0132\022.caffe2.OutputInfo\"j\n\010ModelDef"
  "\022\037\n\004meta\030\001 \001(\0132\021.caffe2.ModelMeta\022\034\n\004ini"
  "t\030\002 \001(\0132\016.caffe2.NetDef\022\037\n\007predict\030\003 \001(\013"
  "2\016.caffe2.NetDef"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_model_2eproto_deps[1] = {
  &::descriptor_table_caffe2_2fproto_2fcaffe2_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_model_2eproto_sccs[4] = {
  &scc_info_InputInfo_model_2eproto.base,
  &scc_info_ModelDef_model_2eproto.base,
  &scc_info_ModelMeta_model_2eproto.base,
  &scc_info_OutputInfo_model_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_2eproto_once;
static bool descriptor_table_model_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto = {
  &descriptor_table_model_2eproto_initialized, descriptor_table_protodef_model_2eproto, "model.proto", 296,
  &descriptor_table_model_2eproto_once, descriptor_table_model_2eproto_sccs, descriptor_table_model_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_model_2eproto::offsets,
  file_level_metadata_model_2eproto, 4, file_level_enum_descriptors_model_2eproto, file_level_service_descriptors_model_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_model_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_model_2eproto), true);
namespace caffe2 {

// ===================================================================

void InputInfo::InitAsDefaultInstance() {
}
class InputInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<InputInfo>()._has_bits_);
};

InputInfo::InputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.InputInfo)
}
InputInfo::InputInfo(const InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe2.InputInfo)
}

void InputInfo::SharedCtor() {
}

InputInfo::~InputInfo() {
  // @@protoc_insertion_point(destructor:caffe2.InputInfo)
  SharedDtor();
}

void InputInfo::SharedDtor() {
}

void InputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputInfo& InputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputInfo_model_2eproto.base);
  return *internal_default_instance();
}


void InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dims = 1;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dims(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.InputInfo)
  return target;
}

size_t InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.InputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dims = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.InputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.InputInfo)
    MergeFrom(*source);
  }
}

void InputInfo::MergeFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
}

void InputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInfo::CopyFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {
  return true;
}

void InputInfo::InternalSwap(InputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputInfo::InitAsDefaultInstance() {
}
class OutputInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputInfo>()._has_bits_);
};

OutputInfo::OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe2.OutputInfo)
}

void OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputInfo_model_2eproto.base);
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:caffe2.OutputInfo)
  SharedDtor();
}

void OutputInfo::SharedDtor() {
}

void OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputInfo& OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputInfo_model_2eproto.base);
  return *internal_default_instance();
}


void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "caffe2.OutputInfo.labels");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string labels = 1;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "caffe2.OutputInfo.labels");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.OutputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string labels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.OutputInfo)
    MergeFrom(*source);
  }
}

void OutputInfo::MergeFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  labels_.InternalSwap(&other->labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelMeta::InitAsDefaultInstance() {
  ::caffe2::_ModelMeta_default_instance_._instance.get_mutable()->input_ = const_cast< ::caffe2::InputInfo*>(
      ::caffe2::InputInfo::internal_default_instance());
  ::caffe2::_ModelMeta_default_instance_._instance.get_mutable()->output_ = const_cast< ::caffe2::OutputInfo*>(
      ::caffe2::OutputInfo::internal_default_instance());
}
class ModelMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMeta>()._has_bits_);
  static const ::caffe2::InputInfo& input(const ModelMeta* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::caffe2::OutputInfo& output(const ModelMeta* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::caffe2::InputInfo&
ModelMeta::_Internal::input(const ModelMeta* msg) {
  return *msg->input_;
}
const ::caffe2::OutputInfo&
ModelMeta::_Internal::output(const ModelMeta* msg) {
  return *msg->output_;
}
ModelMeta::ModelMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ModelMeta)
}
ModelMeta::ModelMeta(const ModelMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::caffe2::InputInfo(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::caffe2::OutputInfo(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.ModelMeta)
}

void ModelMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelMeta_model_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

ModelMeta::~ModelMeta() {
  // @@protoc_insertion_point(destructor:caffe2.ModelMeta)
  SharedDtor();
}

void ModelMeta::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void ModelMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelMeta& ModelMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelMeta_model_2eproto.base);
  return *internal_default_instance();
}


void ModelMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ModelMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModelMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .caffe2.InputInfo input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .caffe2.OutputInfo output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ModelMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.InputInfo input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // optional .caffe2.OutputInfo output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ModelMeta)
  return target;
}

size_t ModelMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ModelMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .caffe2.InputInfo input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional .caffe2.OutputInfo output = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ModelMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ModelMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ModelMeta)
    MergeFrom(*source);
  }
}

void ModelMeta::MergeFrom(const ModelMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ModelMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_input()->::caffe2::InputInfo::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output()->::caffe2::OutputInfo::MergeFrom(from._internal_output());
    }
  }
}

void ModelMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ModelMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelMeta::CopyFrom(const ModelMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ModelMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMeta::IsInitialized() const {
  return true;
}

void ModelMeta::InternalSwap(ModelMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(input_, other->input_);
  swap(output_, other->output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelDef::InitAsDefaultInstance() {
  ::caffe2::_ModelDef_default_instance_._instance.get_mutable()->meta_ = const_cast< ::caffe2::ModelMeta*>(
      ::caffe2::ModelMeta::internal_default_instance());
  ::caffe2::_ModelDef_default_instance_._instance.get_mutable()->init_ = const_cast< ::caffe2::NetDef*>(
      ::caffe2::NetDef::internal_default_instance());
  ::caffe2::_ModelDef_default_instance_._instance.get_mutable()->predict_ = const_cast< ::caffe2::NetDef*>(
      ::caffe2::NetDef::internal_default_instance());
}
class ModelDef::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelDef>()._has_bits_);
  static const ::caffe2::ModelMeta& meta(const ModelDef* msg);
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::caffe2::NetDef& init(const ModelDef* msg);
  static void set_has_init(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::caffe2::NetDef& predict(const ModelDef* msg);
  static void set_has_predict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::caffe2::ModelMeta&
ModelDef::_Internal::meta(const ModelDef* msg) {
  return *msg->meta_;
}
const ::caffe2::NetDef&
ModelDef::_Internal::init(const ModelDef* msg) {
  return *msg->init_;
}
const ::caffe2::NetDef&
ModelDef::_Internal::predict(const ModelDef* msg) {
  return *msg->predict_;
}
void ModelDef::clear_init() {
  if (init_ != nullptr) init_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ModelDef::clear_predict() {
  if (predict_ != nullptr) predict_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ModelDef::ModelDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ModelDef)
}
ModelDef::ModelDef(const ModelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::caffe2::ModelMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_init()) {
    init_ = new ::caffe2::NetDef(*from.init_);
  } else {
    init_ = nullptr;
  }
  if (from._internal_has_predict()) {
    predict_ = new ::caffe2::NetDef(*from.predict_);
  } else {
    predict_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.ModelDef)
}

void ModelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDef_model_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(predict_));
}

ModelDef::~ModelDef() {
  // @@protoc_insertion_point(destructor:caffe2.ModelDef)
  SharedDtor();
}

void ModelDef::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete init_;
  if (this != internal_default_instance()) delete predict_;
}

void ModelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDef& ModelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDef_model_2eproto.base);
  return *internal_default_instance();
}


void ModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(meta_ != nullptr);
      meta_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(init_ != nullptr);
      init_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(predict_ != nullptr);
      predict_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .caffe2.ModelMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .caffe2.NetDef init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .caffe2.NetDef predict = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_predict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.ModelMeta meta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // optional .caffe2.NetDef init = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init(this), target, stream);
  }

  // optional .caffe2.NetDef predict = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::predict(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ModelDef)
  return target;
}

size_t ModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ModelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .caffe2.ModelMeta meta = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meta_);
    }

    // optional .caffe2.NetDef init = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *init_);
    }

    // optional .caffe2.NetDef predict = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *predict_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ModelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ModelDef)
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_meta()->::caffe2::ModelMeta::MergeFrom(from._internal_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_init()->::caffe2::NetDef::MergeFrom(from._internal_init());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_predict()->::caffe2::NetDef::MergeFrom(from._internal_predict());
    }
  }
}

void ModelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {
  if (_internal_has_init()) {
    if (!init_->IsInitialized()) return false;
  }
  if (_internal_has_predict()) {
    if (!predict_->IsInitialized()) return false;
  }
  return true;
}

void ModelDef::InternalSwap(ModelDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meta_, other->meta_);
  swap(init_, other->init_);
  swap(predict_, other->predict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::caffe2::InputInfo* Arena::CreateMaybeMessage< ::caffe2::InputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::OutputInfo* Arena::CreateMaybeMessage< ::caffe2::OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::ModelMeta* Arena::CreateMaybeMessage< ::caffe2::ModelMeta >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::ModelMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::ModelDef* Arena::CreateMaybeMessage< ::caffe2::ModelDef >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::ModelDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
